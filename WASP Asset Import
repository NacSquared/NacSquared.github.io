using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Oracle.ManagedDataAccess.Client;
using System.IO;
using System.Data;
using Excel = Microsoft.Office.Interop.Excel;

//Nick Schneider
//06/2017

namespace WASP_Asset_Import
{
    class Program
    {

        private static System.Data.SqlClient.SqlConnection dbConnection;
        private static System.Data.SqlClient.SqlCommand dbCommand;

        static void Main(string[] args)
        {
            ConnectToDatabase();
            ReadFromExcel();
        }

        private static void ConnectToDatabase()
        {
            try
            {
                dbConnection = new System.Data.SqlClient.SqlConnection("Data Source=vmsql08mo1\\cumobast;Initial Catalog=WaspTrackAsset;Integrated Security=True");

                dbConnection.Open();
            }
            catch (Exception ex)
            {
                System.IO.StreamWriter objWriter = new System.IO.StreamWriter(Properties.Settings.Default.logPath, true);
                objWriter.WriteLine(ex.ToString() + System.DateTime.Now);
                objWriter.Close();
                throw;
            }
        }

        private static void ReadFromExcel()
        {
            //Instantiate datatable to hold all data
            DataTable dt = new DataTable();

            //Instantiate list for asset tag and description to inject individually into database
            List<string> itemIDList = new List<string>();
            List<string> assetTagList = new List<string>();
            List<string> categoryIDList = new List<string>();
            List<string> supplierIDList = new List<string>();
            List<string> conditionIDList = new List<string>();
            List<string> locationIDList = new List<string>();
            List<string> descriptionList = new List<string>();

            //Connect to excel sheet
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(@Properties.Settings.Default.fileName);
            Excel._Worksheet xlWorksheet = (Excel._Worksheet)xlWorkbook.Sheets["Asset"];
            Excel.Range xlRange = xlWorksheet.UsedRange;

            //Get row and col count
            int rowCount = xlRange.Rows.Count;
            int colCount = xlRange.Columns.Count;

            //for each row...
            for (int i = 1; i <= rowCount; i++)
            {
                DataRow workRow = dt.NewRow();
                int t = 0;

                //for each column...
                for (int j = 1; j <= colCount; j++)
                {
                    //If we are on the top row (tags), it adds the data as the column names.
                    if (i == 1)
                    {
                        dt.Columns.Add(new DataColumn(xlRange.Cells[i, j].Value2.ToString()));
                    }
                    else
                    {
                        //Otherwise we add the data row by row to the DataRow.
                        if (xlRange.Cells[i, j].Value2 != null)
                        {                         
                            workRow[t] = xlRange.Cells[i, j].Value2.ToString();
                            t++;

                            //Adding data to the lists for individual injection. If we are in first column it is a Tag, second column is description
                            if (j == 2)
                            {
                                itemIDList.Add(xlRange.Cells[i, j].Value2.ToString());
                            }
                            if (j == 1)
                            {
                                assetTagList.Add(xlRange.Cells[i, j].Value2.ToString());
                            }
                            if (j == 3)
                            {
                                descriptionList.Add(xlRange.Cells[i, j].Value2.ToString());
                            }
                            if (j == 8)
                            {
                                categoryIDList.Add(xlRange.Cells[i, j].Value2.ToString());
                            }
                            if (j == 11)
                            {
                                supplierIDList.Add(xlRange.Cells[i, j].Value2.ToString());
                            }
                            if (j == 13)
                            {
                                conditionIDList.Add(xlRange.Cells[i, j].Value2.ToString());
                            }
                            if (j == 15)
                            {
                                locationIDList.Add(xlRange.Cells[i, j].Value2.ToString());
                            }
                        }                      
                    }                      
                }

                //Adds DataRow to the DataTable
                dt.Rows.Add(workRow);
            }

            InsertIntoDBList(itemIDList, assetTagList, categoryIDList, supplierIDList, conditionIDList, locationIDList, descriptionList);
            xlWorkbook.Close();
            xlApp.Quit();            
        }

        private static void InsertIntoDBList(List<string> _itemIDList, List<string> _assetTagList, List<string> _categoryIDList, List<string> _supplierIDList, List<string> _conditionIDList, List<string> _locationIDList, List<string> _descriptionList)
        {                    
            string strSQLStatement = "";
            string itemID = "";
            string categoryID = "";
            string supplierID = "";
            string conditionID = "";
            string locationID = "";
            string description = "";
                       
            int i = 0;

            foreach (string item in _assetTagList)
            {
                itemID = _itemIDList[i];
                locationID = _locationIDList[i];
                supplierID = _supplierIDList[i];
                conditionID = _conditionIDList[i];
                description = _descriptionList[i];
                
                strSQLStatement = "INSERT INTO ASSET (ITEM_ID, ASSET_TAG, SUPPLIER_ID, CONDITION_ID, LOCATION_ID, ASSET_DESCRIPTION, RECORD_STATUS, COMPANY_ID) VALUES ('" + itemID + "', '" + item + "', '" + supplierID + "', '" + conditionID + "', '" + locationID + "','" + description + "', '1', '1')";

                dbCommand = new System.Data.SqlClient.SqlCommand(strSQLStatement, dbConnection);
                dbCommand.CommandType = System.Data.CommandType.Text;

                dbCommand.ExecuteNonQuery();

                i++;
            }

            dbConnection.Close();
           
        }
    }
}
