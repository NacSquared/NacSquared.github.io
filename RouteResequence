using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using System.Windows.Forms;
using System.ServiceModel;
//using Oracle.DataAccess.Client;
using Oracle.ManagedDataAccess.Client;

namespace Resequence2016_2._0
{
    class Program
    {
        //Initialize class level variables
        private static string date, cycle, route, database;
        private static int dateInt, cycleInt, routeInt;
        private static string prevRoute = "";
        private static string routeVar = "";
        private static int routeCount = 0;
        private static bool firstIteration = true;
        private static bool cycle_only_proc = false;
        private static bool date_proc = false;
        private static bool noParam_proc = false;
        private static bool dateParamProcedureCOMPLETED = false;
        private static bool CycleOnlyProcedureCOMPLETED = false;
        private static bool connectionStringCompleted = false;

        //Instantiates Oracle Connection as class level variable
        private static OracleConnection m_dbConnection;

        //Instantiates Oracle Command as class level variable
        private static OracleCommand OC;

        //Instantiates DataTables as Class level variable
        private static DataTable MasterTable, countTable, dateParamTable;

        private static DataRow countRow;

        //Used to read oracle Data into dataTable
        private static OracleDataAdapter DataAdapter, dateParamDataAdapter;

        private static Array logTextCountArray;

        /*private static string strServer = Properties.Settings.Default.strServerName*/

        static void Main(string[] args)
        {
            //Create Database connection
            m_dbConnection = new OracleConnection();
            OC = new OracleCommand();
            OC.Connection = m_dbConnection;
            OC.CommandType = CommandType.StoredProcedure;
            OC.BindByName = true;

            //Ininitialize master and count tables
            MasterTable = new DataTable();
            countTable = new DataTable();
            dateParamTable = new DataTable();
            countRow = countTable.NewRow();
            countTable.Columns.Add("Cycle");
            countTable.Columns.Add("Route");
            countTable.Columns.Add("Count");

            DataAdapter = new OracleDataAdapter(OC);
            



            if (args.Length == 4)
            {
                //Assigns user input to variables
                date = args[0];
                cycle = args[1];
                route = args[2];
                database = args[3];

                //Checks for proper input from user
                if (ValidateArguments())
                {

                    connectToDatabase();

                    //Determines correct procedure based on parameters entered
                    //
                    //
                    //
                    //
                    if (cycleInt > 0 && routeInt > 0)
                    {
                        OC.Parameters.Add("p_Cycle", OracleDbType.Char).Value = cycle;
                        OC.Parameters.Add("p_Route", OracleDbType.Char).Value = route;
                        OC.Parameters.Add("p_recordset", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                        OC.CommandText = "GTSPL.RESEQ_SP.cycle_route";
                    }

                    if (cycleInt > 0 && routeInt == 0)
                    {
                        OC.Parameters.Add("p_Cycle", OracleDbType.Char).Value = cycle;
                        OC.Parameters.Add("p_recordset", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                        OC.CommandText = "GTSPL.RESEQ_SP.cycle_";
                        cycle_only_proc = true;
                    }

                    if (cycleInt == 0 && routeInt == 0 && dateInt > 0)
                    {
                        OC.Parameters.Add("p_Date", OracleDbType.Char).Value = date;
                        OC.Parameters.Add("p_recordset", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                        OC.CommandText = "GTSPL.RESEQ_SP.date_";
                        date_proc = true;
                    }

                    if (cycleInt == 0 && routeInt == 0 && dateInt == 0)
                    {
                        OC.CommandText = "GTSPL.RESEQ_SP.noParam";
                        OC.Parameters.Add("p_recordset", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                        date = System.DateTime.Today.ToShortDateString();
                        noParam_proc = true;
                    }
                    else
                    {

                    }
                    try
                    {
                        //Fills local datatable using data from Oracle database
                        DataAdapter.Fill(MasterTable);
                        ResequencePoints();
                    }
                    //Error Handling
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                        throw;
                    }

                }

            }
            else
            {
                //Error Handling
                MessageBox.Show("Error, Wrong number of arguments enterered");
                System.IO.StreamWriter objWriter = new System.IO.StreamWriter(Properties.Settings.Default.logPath, true);
                objWriter.WriteLine("ERROR: Invalid Arguments " + System.DateTime.Now);
                objWriter.Close();
            }

        }


        private static void connectToDatabase()
        {
            try
            {
                
                string strServer = database;

                //// Must change connection settings and credentials before DEV and PROD
                //DBAccess.CU_DBAccess rsDBAccess = new DBAccess.CU_DBAccess();

                //Class for encrypted login
                CUDBAccess.CU_DBAccessSoapClient rsDBAccess = new CUDBAccess.CU_DBAccessSoapClient();

                //Gets encrypted login info
                string encryptedDBName = rsDBAccess.GetDBParm(strServer, "DBNAME", true);
                string encryptedDBPassword = rsDBAccess.GetDBParm(strServer, "PASSWORD", true);
                string encryptedDBUser = rsDBAccess.GetDBParm(strServer, "USER", true);

                CryptoService.CU_CryptSoapClient rsCrypto = new CryptoService.CU_CryptSoapClient();

                //Decrypts login info
                string decryptedDBName = rsCrypto.Decrypt(encryptedDBName);
                string decryptedDBPassword = rsCrypto.Decrypt(encryptedDBPassword);
                string decryptedDBUser = rsCrypto.Decrypt(encryptedDBUser);
              
                string connectionString = "User Id=" + decryptedDBUser + ";Password=" + decryptedDBPassword + ";Data Source=" + decryptedDBName + ";";
                //string connectionString = "Data Source=CISDEV;User ID=AM4MDF;Password=sppw3t;";

                m_dbConnection.ConnectionString = connectionString;

                m_dbConnection.Open();

                //Debugging
                var testConn = m_dbConnection.State;

                System.IO.StreamWriter objWriter = new System.IO.StreamWriter(Properties.Settings.Default.logPath, true);


                //Prevents log text from repeating "successful database connection" when using Date to find cycle and route
                if (date_proc || noParam_proc && connectionStringCompleted == true)
                {                  
                    
                }
                else
                {
                    objWriter.WriteLine("");
                    objWriter.WriteLine("Database connection established " + System.DateTime.Now);
                    objWriter.Close();

                    connectionStringCompleted = true;
                }

            }
            catch (OracleException oex)
            {
                MessageBox.Show(oex.Message);
                System.IO.StreamWriter objWriter = new System.IO.StreamWriter(Properties.Settings.Default.logPath, true);
                objWriter.WriteLine("Database connection FAILED " + oex.Message + System.DateTime.Now);
                objWriter.Close();
                throw;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);

                //Log file
                System.IO.StreamWriter objWriter = new System.IO.StreamWriter(Properties.Settings.Default.logPath, true);
                objWriter.WriteLine("Database connection FAILED " + ex.Message + System.DateTime.Now);
                objWriter.Close();
                throw;
            }
        }



        //Checking to validate the arguments entered by the user meet program parameter requirements, else error out
        private static bool ValidateArguments()
        {
            bool error = false;
            bool TryP = false;

            if (date.Length == 8)
            {
                if (cycle.Length == 2)
                {
                    if (route.Length == 4)
                    {
                        TryP = Int32.TryParse(date, out dateInt);

                        if (TryP == true)
                        {
                            TryP = Int32.TryParse(cycle, out cycleInt);

                            if (TryP == true)
                            {
                                TryP = Int32.TryParse(route, out routeInt);

                                if (TryP == true)
                                {

                                }
                                else
                                {
                                    //Log file
                                    MessageBox.Show("Error: non-integer entered for Route");
                                    System.IO.StreamWriter objWriter = new System.IO.StreamWriter(Properties.Settings.Default.logPath, true);
                                    objWriter.WriteLine("Error: non-integer entered for Route " + System.DateTime.Now);
                                    objWriter.Close();
                                }
                            }
                            else
                            {
                                TryP = false;
                                //Log file
                                MessageBox.Show("Error: non-integer entered for Cycle");
                                System.IO.StreamWriter objWriter = new System.IO.StreamWriter(Properties.Settings.Default.logPath, true);
                                objWriter.WriteLine("Error: non-integer entered for Cycle " + System.DateTime.Now);
                                objWriter.Close();
                            }
                        }
                        else
                        {
                            TryP = false;
                            //Log file
                            MessageBox.Show("Error: non-integer entered for Date");
                            System.IO.StreamWriter objWriter = new System.IO.StreamWriter(Properties.Settings.Default.logPath, true);
                            objWriter.WriteLine("Error: non-integer entered for Date " + System.DateTime.Now);
                            objWriter.Close();
                        }
                    }
                    else
                    {
                        error = true;
                        //Log file
                        MessageBox.Show("Error: Route entered incorrectly");
                        System.IO.StreamWriter objWriter = new System.IO.StreamWriter(Properties.Settings.Default.logPath, true);
                        objWriter.WriteLine("Error: Route entered incorrectly " + System.DateTime.Now);
                        objWriter.Close();
                    }
                }
                else
                {
                    error = true;
                    //Log file
                    MessageBox.Show("Error: Cycle entered incorrectly");
                    System.IO.StreamWriter objWriter = new System.IO.StreamWriter(Properties.Settings.Default.logPath, true);
                    objWriter.WriteLine("Error: Cycle entered incorrectly " + System.DateTime.Now);
                    objWriter.Close();
                }
            }
            else
            {
                error = true;
                //Log file
                MessageBox.Show("Error: Date entered incorrectly");
                System.IO.StreamWriter objWriter = new System.IO.StreamWriter(Properties.Settings.Default.logPath, true);
                objWriter.WriteLine("Error: Date entered Incorrectly " + System.DateTime.Now);
                objWriter.Close();
            }


            //return TryP;
            return !error;
        }


        private static void ResequencePoints()
        {
            firstIteration = true;
            string cntCycle, cntRoute, cntCount;
            int currentRow = 0;


            try
            {
                int intNextSeq = 0;

                //ERROR HANDLING:
                //Checking that user has entered a valid cycle number
                if (routeInt > 0 && cycleInt == 0)
                {
                    try
                    {
                        MessageBox.Show("ERROR: Incorrect parameters");
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                        throw;
                    }
                }

                else
                {

                }

                //Starts original loop through mastertable
                foreach (System.Data.DataRow row in MasterTable.Rows)
                {
                    //If user has entered ONLY Cycle, it will use this procedure.
                    //
                    //                
                    currentRow += 1;

                    if (cycle_only_proc == true)
                    {
                        if (firstIteration == true)
                        {
                            prevRoute = row[1].ToString();
                            routeCount = 1; //changed from 0 to 1 3/20
                            firstIteration = false;
                        }
                        else
                        {
                            //Counts the number of routes in a cycle, stops counting when previous route is different from the current       
                            if (prevRoute.Equals(row[1]) && !(currentRow == MasterTable.Rows.Count))
                            {
                                routeCount += 1;
                            }
                            else
                            {
                                //Creates datarow for operation comparison when resequencing
                                countTable.NewRow();
                                countRow[0] = row[0];
                                countRow[1] = prevRoute;
                                countRow[2] = routeCount;
                                countTable.Rows.Add(countRow.ItemArray);
                                cntCycle = countRow[0].ToString();
                                cntRoute = countRow[1].ToString();
                                cntCount = countRow[2].ToString();
                                bool found = false;
                                intNextSeq = 0;
                                

                                foreach (System.Data.DataRow row_ in MasterTable.Rows)
                                {
                                    //Operation comparisons to determine sequential denominator
                                    //Updates sequence number
                                    if (row_[0].ToString() == cntCycle && row_[1].ToString() == cntRoute && Convert.ToInt64(cntCount) >= 1000)
                                    {
                                        intNextSeq += 5;
                                        row_[2] = intNextSeq;
                                        found = true;
                                        prevRoute = row[1].ToString();
                                    }
                                    else if (row_[0].ToString() == cntCycle && row_[1].ToString() == cntRoute && Convert.ToInt64(cntCount) < 1000)
                                    {
                                        intNextSeq += 10;
                                        row_[2] = intNextSeq;
                                        found = true;
                                        prevRoute = row[1].ToString();
                                    }
                                    else if (found == true)
                                    {
                                        routeCount = 1;
                                        break;
                                    }
                                }
                            }
                        }

                        CycleOnlyProcedureCOMPLETED = true;                              
                    }

                    //If date is used to determine Cycle and Route to be resequenced, this function will be used
                    //
                    //
                    else if (date_proc == true || noParam_proc == true)
                    {
                        //Clear dateParamTable
                        dateParamTable.Clear();
                        
                        cycle = row[0].ToString();
                        route = row[1].ToString();

                        m_dbConnection = new OracleConnection();
                        OC = new OracleCommand();
                        OC.Connection = m_dbConnection;
                        OC.CommandType = CommandType.StoredProcedure;
                        OC.BindByName = true;

                        OC.Parameters.Add("p_Cycle", OracleDbType.Char).Value = cycle;
                        OC.Parameters.Add("p_Route", OracleDbType.Char).Value = route;
                        OC.Parameters.Add("p_recordset", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
                        OC.CommandText = "GTSPL.RESEQ_SP.cycle_route";

                        dateParamDataAdapter = new OracleDataAdapter(OC);

                        connectToDatabase();

                        //Fills dateParamTable with new data consisting of each row's cycle and route
                        dateParamDataAdapter.Fill(dateParamTable);

                        //Gets count of routes bc only one route has been entered in parameter
                        cntCount = dateParamTable.Rows.Count.ToString();

                        //Creates datarow for operation comparison when resequencing
                        countTable.NewRow();
                        countRow[0] = row[0];
                        countRow[1] = row[1];
                        countRow[2] = cntCount;
                        countTable.Rows.Add(countRow.ItemArray);
                        cntCycle = countRow[0].ToString();
                        cntRoute = countRow[1].ToString();
                        cntCount = countRow[2].ToString();

                        bool found = false;

                        intNextSeq = 0;

                        foreach (System.Data.DataRow row_ in dateParamTable.Rows)
                        {
                            //Operation comparisons to determine sequential denominator
                            //Updates sequence number
                            if (row_[0].ToString() == cntCycle && row_[1].ToString() == cntRoute && Convert.ToInt64(cntCount) >= 1000)
                            {
                                intNextSeq += 5;
                                row_[2] = intNextSeq;
                                found = true;
                                //prevRoute = row[1].ToString();
                            }
                            else if (row_[0].ToString() == cntCycle && row_[1].ToString() == cntRoute && Convert.ToInt64(cntCount) < 1000)
                            {
                                intNextSeq += 10;
                                row_[2] = intNextSeq;
                                found = true;
                                //prevRoute = row[1].ToString();
                            }
                            else if (found == true)
                            {
                                routeCount = 0;
                                break;
                            }
                        }

                        foreach (System.Data.DataRow row_ in dateParamTable.Rows)
                        {
                            OC.Parameters.Clear();
                            OC.Parameters.Add("MR_CYCLE_IN", OracleDbType.Char).Value = row_[0];
                            OC.Parameters.Add("MR_ROUTE_IN", OracleDbType.Char).Value = row_[1];
                            OC.Parameters.Add("MR_ROUTE_CY_SEQ_IN", OracleDbType.Int64).Value = row_[2];
                            OC.Parameters.Add("SP_ID_IN", OracleDbType.Int64).Value = row_[3];
                            OC.Parameters.Add("SUCCESS_OUT", OracleDbType.Int64).Direction = ParameterDirection.Output;
                            OC.Parameters.Add("MESSAGE", OracleDbType.Varchar2).Direction = ParameterDirection.Output;
                            OC.CommandText = "GTSPL.RESEQ_SP.updateSeqPoints";
                            OC.ExecuteNonQuery();

                            string Success = OC.Parameters["SUCCESS_OUT"].Value.ToString();

                            if (Success != "1")
                            {
                                string Message = OC.Parameters["MESSAGE"].Value.ToString();
                            }

                        }

                        dateParamProcedureCOMPLETED = true;
                    }
                    //If user has entered BOTH Cycle AND Route it will use this procedure
                    //
                    //
                    else
                    {
                        //Gets count of routes bc only one route has been entered in parameter
                        cntCount = MasterTable.Rows.Count.ToString();

                        //Creates datarow for operation comparison when resequencing
                        DataRow countRow = countTable.NewRow();
                        countRow[0] = row[0];
                        countRow[1] = row[1];
                        countRow[2] = cntCount;
                        cntCycle = countRow[0].ToString();
                        cntRoute = countRow[1].ToString();
                        cntCount = countRow[2].ToString();

                        bool found = false;

                        intNextSeq = 0;

                        foreach (System.Data.DataRow row_ in MasterTable.Rows)
                        {
                            //Operation comparisons to determine sequential denominator
                            //Updates sequence number
                            if (row_[0].ToString() == cntCycle && row_[1].ToString() == cntRoute && Convert.ToInt64(cntCount) >= 1000)
                            {
                                intNextSeq += 5;
                                row_[2] = intNextSeq;
                                found = true;
                                //prevRoute = row[1].ToString();
                            }
                            else if (row_[0].ToString() == cntCycle && row_[1].ToString() == cntRoute && Convert.ToInt64(cntCount) < 1000)
                            {
                                intNextSeq += 10;
                                row_[2] = intNextSeq;
                                found = true;
                                //prevRoute = row[1].ToString();
                            }
                            else if (found == true)
                            {
                                routeCount = 0;
                                break;
                            }
                        }
                    }
                }

                //Checks to ensure DB hasn't been updated in dataParam Procedure
                if (dateParamProcedureCOMPLETED == false)
                {   
                    //Loops through updated mastertable and calls update procedure to update DB line by line
                    foreach (System.Data.DataRow row_ in MasterTable.Rows)
                    {
                        OC.Parameters.Clear();
                        OC.Parameters.Add("MR_CYCLE_IN", OracleDbType.Char).Value = row_[0];
                        OC.Parameters.Add("MR_ROUTE_IN", OracleDbType.Char).Value = row_[1];
                        OC.Parameters.Add("MR_ROUTE_CY_SEQ_IN", OracleDbType.Int64).Value = row_[2];
                        OC.Parameters.Add("SP_ID_IN", OracleDbType.Int64).Value = row_[3];
                        OC.Parameters.Add("SUCCESS_OUT", OracleDbType.Int64).Direction = ParameterDirection.Output;
                        OC.Parameters.Add("MESSAGE", OracleDbType.Varchar2).Direction = ParameterDirection.Output;
                        OC.CommandText = "GTSPL.RESEQ_SP.updateSeqPoints";
                        OC.ExecuteNonQuery();

                        string Success = OC.Parameters["SUCCESS_OUT"].Value.ToString();

                        if (Success != "1")
                        {
                            string Message = OC.Parameters["MESSAGE"].Value.ToString();
                        }
                    }
                }
                else
                {
                    //DB has been updated through dateParam
                }

                //Log file
                if (CycleOnlyProcedureCOMPLETED || dateParamProcedureCOMPLETED)
                {
                    System.IO.StreamWriter objWriter = new System.IO.StreamWriter(Properties.Settings.Default.logPath, true);
                    foreach (System.Data.DataRow row in countTable.Rows)
                    {
                        objWriter.WriteLine("Date:" + date + " Cycle:" + row[0] + " Route:" + row[1] + " --- " + row[2] + " service points resequenced successfully " + System.DateTime.Now);
                    }

                    objWriter.Close();
                }
                else
                {
                    routeCount = MasterTable.Rows.Count;
                    System.IO.StreamWriter objWriter = new System.IO.StreamWriter(Properties.Settings.Default.logPath, true);
                    objWriter.WriteLine("Date:" + date + " Cycle:" + cycle + " Route:" + route + " --- " + routeCount + " service points resequenced successfully " + System.DateTime.Now);
                    objWriter.Close();
                }
                
                
            }
            catch (Exception ex)
            {
                //Log file for Error Handling
                MessageBox.Show(ex.Message);
                System.IO.StreamWriter objWriter = new System.IO.StreamWriter(Properties.Settings.Default.logPath, true);
                objWriter.WriteLine("Service points resequece UNSUCCESSFUL " + ex.Message + System.DateTime.Now);
                objWriter.Close();
                throw;
            }
        }
    }
}
